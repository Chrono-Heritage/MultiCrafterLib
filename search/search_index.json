{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview # Install # You can get the latest release on here or search it on the Mod Browser with its name, MultiCrafter Lib . Supports # Method Json JavaScript Java Note Dependency \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Players need download this mod Injection \u2714\ufe0f \u2714\ufe0f No Need Keep your mod standalone Jitpack \u2714\ufe0f Full sources code support Dependency Injection Jitpack For a Json, JavaScript or Java mod. If you want your mod to depend on MultiCrafter and only focus on your contents, it's for your use case. You should add MultiCrafter as a dependency in the mod.[h]json file: mod.json mod.hjson \"dependencies\" : [ \"multi-crafter\" ] dependencies: [\"multi-crafter\"] For a Json or JavaScript mod. Injection makes your mod an actual Java mod, so it must fit the structure of Java mod. Step 1 # You should download a zip, named MultiCrafter-injection.zip , in here . Step 2 # Then unzip it and copy the its contents into the root directory of your mod. Unzip will add essential files into the root directory. Please pay attention to your structure and avoid secondary directory in your mod zip. Suppose your have this structure: Before unzip: your-mod/ \u251c\u2500 content/ | \u251c\u2500 crafter.hjson \u251c\u2500 mod.hjson \u251c\u2500 icon.png After unzip: your-mod/ \u251c\u2500 multicrafter/ \u251c\u2500 scripts/ | \u251c\u2500 multi-crafter/ | | \u251c\u2500 lib.js \u251c\u2500 content/ | \u251c\u2500 crafter.hjson \u251c\u2500 mod.hjson \u251c\u2500 icon.png \u251c\u2500 classes.dex MultiCrafter injection doesn't work when you zip your mod folder in a wrong way where have created a secondary directory. Suppose you had a mod zip, named your-mod.zip . This will work. In your-mod.zip, there are... multicrafter/ scripts/ content/ mod.hjson icon.png But this will not. In your-mod.zip, there are... your-mod/ \u251c\u2500 multicrafter/ \u251c\u2500 scripts/ \u251c\u2500 content/ \u251c\u2500 mod.hjson \u251c\u2500 icon.png If you're using ZArchiver app, you could multi-select the each file inside your mod folder and zip them all into one. Step 3 # Then add this line in your mod.[h]json : mod.json mod.hjson \"main\" : \"MultiCrafterAdapter\" main: MultiCrafterAdapter Then you can create your own multicrafter after checking this instrution. Root Directory: A folder which always has icon.png and mod.[h]json . You may face a warning about overwriting. Your device may warn you that would overwrite something. It's always safe, but you'd better to back-up your mod workspace before copy. For GitHub # If you've uploaded your mod onto GitHub, please be careful about your mod type. Because, a non-Java mod is always downloaded as zip with a secondary directory ingame, which doesn't work like what's mentioned above. you have to add this line in your mod.[h]json : mod.json mod.hjson \"java\" : \"true\" java: true Thus, you need create a release with your mod file on your GitHub page manually. Remember to change its extension directly from *.zip to *.jar , for example: If your mod file is my-first-json-mod.zip , it should be my-first-json-mod.jar . Upgrade MultiCrafter Lib # With Injection, you have to upgrade MultiCrafter Lib manually. It's easy that you just need repeat the step above and handle with overwritten. For a Java mod. You can click here to fetch the latest version of MultiCrafter Lib. Groovy Kotlin Add the JitPack repository to your build.gradle repositories { maven { url 'https://jitpack.io' } } Add the dependency dependencies { implementation 'com.github.liplum:MultiCrafterLib:<version>' } Add the JitPack repository to your build.gradle.kts repositories { maven { url = uri ( \"https://www.jitpack.io\" ) } } Add the dependency dependencies { implementation ( \"com.github.liplum:MultiCrafterLib:<version>\" ) } More Info # You can access the repository on GitHub to obtain more information. If you face any issue with MultiCrafter, please contact us on Issue Report page. Join our Discord server to send us feedback or get help immediately. Welcome to contribute MultiCrafter!","title":"Overview"},{"location":"#overview","text":"","title":"Overview"},{"location":"#install","text":"You can get the latest release on here or search it on the Mod Browser with its name, MultiCrafter Lib .","title":"Install"},{"location":"#supports","text":"Method Json JavaScript Java Note Dependency \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Players need download this mod Injection \u2714\ufe0f \u2714\ufe0f No Need Keep your mod standalone Jitpack \u2714\ufe0f Full sources code support Dependency Injection Jitpack For a Json, JavaScript or Java mod. If you want your mod to depend on MultiCrafter and only focus on your contents, it's for your use case. You should add MultiCrafter as a dependency in the mod.[h]json file: mod.json mod.hjson \"dependencies\" : [ \"multi-crafter\" ] dependencies: [\"multi-crafter\"] For a Json or JavaScript mod. Injection makes your mod an actual Java mod, so it must fit the structure of Java mod.","title":"Supports"},{"location":"#step-1","text":"You should download a zip, named MultiCrafter-injection.zip , in here .","title":"Step 1"},{"location":"#step-2","text":"Then unzip it and copy the its contents into the root directory of your mod. Unzip will add essential files into the root directory. Please pay attention to your structure and avoid secondary directory in your mod zip. Suppose your have this structure: Before unzip: your-mod/ \u251c\u2500 content/ | \u251c\u2500 crafter.hjson \u251c\u2500 mod.hjson \u251c\u2500 icon.png After unzip: your-mod/ \u251c\u2500 multicrafter/ \u251c\u2500 scripts/ | \u251c\u2500 multi-crafter/ | | \u251c\u2500 lib.js \u251c\u2500 content/ | \u251c\u2500 crafter.hjson \u251c\u2500 mod.hjson \u251c\u2500 icon.png \u251c\u2500 classes.dex MultiCrafter injection doesn't work when you zip your mod folder in a wrong way where have created a secondary directory. Suppose you had a mod zip, named your-mod.zip . This will work. In your-mod.zip, there are... multicrafter/ scripts/ content/ mod.hjson icon.png But this will not. In your-mod.zip, there are... your-mod/ \u251c\u2500 multicrafter/ \u251c\u2500 scripts/ \u251c\u2500 content/ \u251c\u2500 mod.hjson \u251c\u2500 icon.png If you're using ZArchiver app, you could multi-select the each file inside your mod folder and zip them all into one.","title":"Step 2"},{"location":"#step-3","text":"Then add this line in your mod.[h]json : mod.json mod.hjson \"main\" : \"MultiCrafterAdapter\" main: MultiCrafterAdapter Then you can create your own multicrafter after checking this instrution. Root Directory: A folder which always has icon.png and mod.[h]json . You may face a warning about overwriting. Your device may warn you that would overwrite something. It's always safe, but you'd better to back-up your mod workspace before copy.","title":"Step 3"},{"location":"#for-github","text":"If you've uploaded your mod onto GitHub, please be careful about your mod type. Because, a non-Java mod is always downloaded as zip with a secondary directory ingame, which doesn't work like what's mentioned above. you have to add this line in your mod.[h]json : mod.json mod.hjson \"java\" : \"true\" java: true Thus, you need create a release with your mod file on your GitHub page manually. Remember to change its extension directly from *.zip to *.jar , for example: If your mod file is my-first-json-mod.zip , it should be my-first-json-mod.jar .","title":"For GitHub"},{"location":"#upgrade-multicrafter-lib","text":"With Injection, you have to upgrade MultiCrafter Lib manually. It's easy that you just need repeat the step above and handle with overwritten. For a Java mod. You can click here to fetch the latest version of MultiCrafter Lib. Groovy Kotlin Add the JitPack repository to your build.gradle repositories { maven { url 'https://jitpack.io' } } Add the dependency dependencies { implementation 'com.github.liplum:MultiCrafterLib:<version>' } Add the JitPack repository to your build.gradle.kts repositories { maven { url = uri ( \"https://www.jitpack.io\" ) } } Add the dependency dependencies { implementation ( \"com.github.liplum:MultiCrafterLib:<version>\" ) }","title":"Upgrade MultiCrafter Lib"},{"location":"#more-info","text":"You can access the repository on GitHub to obtain more information. If you face any issue with MultiCrafter, please contact us on Issue Report page. Join our Discord server to send us feedback or get help immediately. Welcome to contribute MultiCrafter!","title":"More Info"},{"location":"api/","text":"API # MultiCrafter # The MultiCrafter works like a normal GenericCrafter , so MultiCrafter has most of GenericCrafter 's API. Field Type Default Note itemCapacityMultiplier float 1f fluidCapacityMultiplier float 1f powerCapacityMultiplier float 1f \ufe0f recipes Object null \ufe0f menu String transform \ufe0f craftEffect Effect none \ufe0f updateEffect Effect none \ufe0f changeRecipeEffect Effect upgradeCore when recipe is changed. \ufe0f fluidOutputDirections int[] {-1} substitute for vanilla liquidOutputDirections \ufe0f updateEffectChance float 0.04f \ufe0f warmupSpeed float 0.019f \ufe0f powerCapacity float 0f \ufe0f dumpExtraFluid boolean true \ufe0f heatColor Color new Color(1f, 0.22f, 0.22f, 0.8f) What color of heat for recipe selector. \ufe0f drawer DrawBlock new DrawDefault() \ufe0f Drawer # Drawer Replacement DrawHeatRegion multicraft.DrawHeatRegion DrawLiquidOutputs No replacement","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#multicrafter","text":"The MultiCrafter works like a normal GenericCrafter , so MultiCrafter has most of GenericCrafter 's API. Field Type Default Note itemCapacityMultiplier float 1f fluidCapacityMultiplier float 1f powerCapacityMultiplier float 1f \ufe0f recipes Object null \ufe0f menu String transform \ufe0f craftEffect Effect none \ufe0f updateEffect Effect none \ufe0f changeRecipeEffect Effect upgradeCore when recipe is changed. \ufe0f fluidOutputDirections int[] {-1} substitute for vanilla liquidOutputDirections \ufe0f updateEffectChance float 0.04f \ufe0f warmupSpeed float 0.019f \ufe0f powerCapacity float 0f \ufe0f dumpExtraFluid boolean true \ufe0f heatColor Color new Color(1f, 0.22f, 0.22f, 0.8f) What color of heat for recipe selector. \ufe0f drawer DrawBlock new DrawDefault() \ufe0f","title":"MultiCrafter"},{"location":"api/#drawer","text":"Drawer Replacement DrawHeatRegion multicraft.DrawHeatRegion DrawLiquidOutputs No replacement","title":"Drawer"},{"location":"customize/","text":"Customize # Menu Style # You can select which menu style detailed-described blow you want with a case-insensitive name. The default menu style is Transform . Specify # Hjson Json JavaScript Suppose you have such structure with a MultiCrafter, named mine-crafter content/ \u251c\u2500 blocks/ \u2502 \u251c\u2500 mine-crafter.hjson You can configure its menu style. menu: Transform Suppose you have such structure with a MultiCrafter, named mine-crafter content/ \u251c\u2500 blocks/ \u2502 \u251c\u2500 mine-crafter.json You can configure its menu style. \"menu\" : \"Transform\" Suppose you have a MultiCrafter, named mine-crafter const multi = require ( \"multi-crafter/lib\" ) const mineCrafter = multi . MultiCrafter ( \"mine-crafter\" ) You can configure its menu style. mineCrafter . menu = \"Transform\" Built-in Styles # Transform Simple Number Detailed Type: Transform Type: Simple Type: Number Type: Detailed DrawRecipe # DrawRecipe drawer let you draw different images for each recipe. Type: multicraft.DrawRecipe It looks like a DrawMulti , but the drawer will be changed once another recipe is selected. Field Type Default Note drawers DrawBlock[] {} ordered drawers for each recipe defaultDrawer int 0 the default drawer index in drawers for icon generation Suppose you have those sprites with a MultiCrafter, named mine-crafter . sprites/ \u251c\u2500 blocks/ \u2502 \u251c\u2500 mine-crafter-1.png \u2502 \u251c\u2500 mine-crafter-2.png \u2502 \u251c\u2500 mine-crafter-3.png Sprite File Name mine-crafter-1.png mine-crafter-2.png mine-crafter-3.png Hjson Json drawer: { type: multicraft.DrawRecipe defaultDrawer: 0 // an index used for generating the icon of this crafter. drawers: [ // for recipe 0 { type: DrawMulti drawers: [ { type: DrawRegion suffix: -1 } { type: DrawArcSmelt } ] } // for recipe 1 { type: DrawRegion suffix: -2 } // for recipe 2 { type: DrawRegion suffix: -3 } ] } \"drawer\" : { \"type\" : \"multicraft.DrawRecipe\" , \"drawers\" : [ { \"type\" : \"DrawMulti\" , \"drawers\" : [ { \"type\" : \"DrawRegion\" , \"suffix\" : \"-1\" }, { \"type\" : \"DrawArcSmelt\" }, ] }, { \"type\" : \"DrawRegion\" , \"suffix\" : \"-2\" }, { \"type\" : \"DrawRegion\" , \"suffix\" : \"-3\" } ] }","title":"Customize"},{"location":"customize/#customize","text":"","title":"Customize"},{"location":"customize/#menu-style","text":"You can select which menu style detailed-described blow you want with a case-insensitive name. The default menu style is Transform .","title":"Menu Style"},{"location":"customize/#specify","text":"Hjson Json JavaScript Suppose you have such structure with a MultiCrafter, named mine-crafter content/ \u251c\u2500 blocks/ \u2502 \u251c\u2500 mine-crafter.hjson You can configure its menu style. menu: Transform Suppose you have such structure with a MultiCrafter, named mine-crafter content/ \u251c\u2500 blocks/ \u2502 \u251c\u2500 mine-crafter.json You can configure its menu style. \"menu\" : \"Transform\" Suppose you have a MultiCrafter, named mine-crafter const multi = require ( \"multi-crafter/lib\" ) const mineCrafter = multi . MultiCrafter ( \"mine-crafter\" ) You can configure its menu style. mineCrafter . menu = \"Transform\"","title":"Specify"},{"location":"customize/#built-in-styles","text":"Transform Simple Number Detailed Type: Transform Type: Simple Type: Number Type: Detailed","title":"Built-in Styles"},{"location":"customize/#drawrecipe","text":"DrawRecipe drawer let you draw different images for each recipe. Type: multicraft.DrawRecipe It looks like a DrawMulti , but the drawer will be changed once another recipe is selected. Field Type Default Note drawers DrawBlock[] {} ordered drawers for each recipe defaultDrawer int 0 the default drawer index in drawers for icon generation Suppose you have those sprites with a MultiCrafter, named mine-crafter . sprites/ \u251c\u2500 blocks/ \u2502 \u251c\u2500 mine-crafter-1.png \u2502 \u251c\u2500 mine-crafter-2.png \u2502 \u251c\u2500 mine-crafter-3.png Sprite File Name mine-crafter-1.png mine-crafter-2.png mine-crafter-3.png Hjson Json drawer: { type: multicraft.DrawRecipe defaultDrawer: 0 // an index used for generating the icon of this crafter. drawers: [ // for recipe 0 { type: DrawMulti drawers: [ { type: DrawRegion suffix: -1 } { type: DrawArcSmelt } ] } // for recipe 1 { type: DrawRegion suffix: -2 } // for recipe 2 { type: DrawRegion suffix: -3 } ] } \"drawer\" : { \"type\" : \"multicraft.DrawRecipe\" , \"drawers\" : [ { \"type\" : \"DrawMulti\" , \"drawers\" : [ { \"type\" : \"DrawRegion\" , \"suffix\" : \"-1\" }, { \"type\" : \"DrawArcSmelt\" }, ] }, { \"type\" : \"DrawRegion\" , \"suffix\" : \"-2\" }, { \"type\" : \"DrawRegion\" , \"suffix\" : \"-3\" } ] }","title":"DrawRecipe"},{"location":"troubleshooting/","text":"Troubleshooting #","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"usage/","text":"Usage # Hjson Json JavaScript Create a file, for example, a mine-crafter.hjson , in the content/blocks folder. content/ \u251c\u2500 blocks/ \u2502 \u251c\u2500 mine-crafter.hjson Then set its type to multicraft.MultiCrafter . type: multicraft.MultiCrafter You can add recipes like this: recipes: [ { input: ozone/1.5 output: { items: [ copper/1 graphite/2 ] power: 2.5 } craftTime: 250.0 } { input: { items: [ cyber-io-ic/1 // You can add moded items or fluids lead // the same as \"lead/1\" ] } output: { fluids: [ cyber-io-cyberion/1.2 ] } craftTime: 210.0 } ] Create a file, for example, a mine-crafter.json , in the content/blocks folder. content/ \u251c\u2500 blocks/ \u2502 \u251c\u2500 mine-crafter.json Then set its type to multicraft.MultiCrafter . \"type\" : \"multicraft.MultiCrafter\" You can add recipes like this: \"recipes\" : [ { \"input\" : \"ozone/1.5\" , \"output\" : { \"items\" : [ \"copper/1\" , \"graphite/2\" ], \"power\" : 2.5 }, \"craftTime\" : 250.0 }, { \"input\" : { \"items\" : [ \"cyber-io-ic/1\" , \"lead\" ] }, \"output\" : { \"fluids\" : [ \"cyber-io-cyberion/1.2\" ] }, \"craftTime\" : 210.0 } ] In a javascript file, you should import the MultiCrafter class from multi-cafter const multi = require ( \"multi-crafter/lib\" ) const mineCrafter = multi . MultiCrafter ( \"mine-crafter\" ) You can add recipes like this: mineCrafter . recipes = [ { input : \"ozone/1.5\" , output : { items : [ \"copper/1\" , \"graphite/2\" ] power : 2.5 }, craftTime : 250.0 },{ input : { items : [ \"cyber-io-ic/1\" , \"lead\" ] }, output : { fluids : [ \"cyber-io-cyberion/1.2\" ] }, craftTime : 210.0 }] Recipe # A recipe has several fields: Field Type Note input Object, String or List alias: [ in , i ] output Object, String or List alias: [ out , o ] crafterTime number | unit: tick how long to do a synthesis, can be 0. icon String such as Icon.lock-open . see icon iconColor String a hex color for icon Input and Output # String # The input or output can be a String . If so, it will be considered as an item or fluid. If there is no amount given, 1 will be the amount as default. Hjson Json JavaScript input: copper/2 output: water/1.2 \"input\" : \"copper/2\" , \"output\" : \"water/1.2\" input : \"copper/2\" , output : \"water/1.2\" List # The input or output can be a List . If so, every element will be treated as an item or fluid. Hjson Json JavaScript input: [copper/2,lead/3] output: slag/2.5 \"input\" : [ \"copper/2\" , \"lead/3\" ], \"output\" : \"slag/2.5\" input : [ \"copper/2\" , \"lead/3\" ], output : \"slag/2.5\" Object # The input or output can be an Object . With this style, its power is unlimited. Key Type Optional Note items String or List fluids String or List power number | unit: power/tick \u2714\ufe0f how much power for input/output, 0 as default heat number \u2714\ufe0f how much heat for input/output, 0 as default icon String \u2714\ufe0f such as Icon.lock-open . see icon iconColor String \u2714\ufe0f a hex color for icon craftEffect String \u2714\ufe0f an independent craft effect for each recipe Hjson Json JavaScript input: { items: copper/10 heat: 5 } output: { items: moded-item/1 fluids: [ water/1.5, ozone/3 ] power: 1.5 } \"input\" : { \"items\" : \"copper/10\" , \"heat\" : 5 } \"output\" : { \"items\" : \"moded-item/1\" , \"fluids\" : [ \"water/1.5\" , \"ozone/3\" ], \"power\" : 1.5 } input : { items : \"copper/10\" , heat : 5 }, output : { items : \"moded-item/1\" , fluids : [ \"water/1.5\" , \"ozone/3\" ], power : 1.5 } Icon # You can customize which icon is used for your recipe selector menu. If you don't set a dedicated icon, it will find the first one from the recipe. For example: alphaaaa mono icon: alphaaaa iconColor: F30000 recipes: [ { input: ozone/1.5 output:{ items : copper power : 2 icon: alphaaaa iconColor: \"F30000\" } craftTime : 250.0 } { input: copper output:{ items : coal icon: lock-open } craftTime : 120 } ] icon: mono menu: Simple recipes: [ { input: copper output: coal craftTime : 60 icon: mono } { input: copper output: ozone craftTime : 60 } ] You can set it to a String , it will find the proper icon automatically. For a built-in icon, it should start with Icon. , such as Icon.lock-open or Icon.trash . For an icon from item, fluid, unit or block, it should be its name, such as mono , phase-heat . For any texture, it should be its name, such as your-mod-icon or alphaaaa .","title":"Usage"},{"location":"usage/#usage","text":"Hjson Json JavaScript Create a file, for example, a mine-crafter.hjson , in the content/blocks folder. content/ \u251c\u2500 blocks/ \u2502 \u251c\u2500 mine-crafter.hjson Then set its type to multicraft.MultiCrafter . type: multicraft.MultiCrafter You can add recipes like this: recipes: [ { input: ozone/1.5 output: { items: [ copper/1 graphite/2 ] power: 2.5 } craftTime: 250.0 } { input: { items: [ cyber-io-ic/1 // You can add moded items or fluids lead // the same as \"lead/1\" ] } output: { fluids: [ cyber-io-cyberion/1.2 ] } craftTime: 210.0 } ] Create a file, for example, a mine-crafter.json , in the content/blocks folder. content/ \u251c\u2500 blocks/ \u2502 \u251c\u2500 mine-crafter.json Then set its type to multicraft.MultiCrafter . \"type\" : \"multicraft.MultiCrafter\" You can add recipes like this: \"recipes\" : [ { \"input\" : \"ozone/1.5\" , \"output\" : { \"items\" : [ \"copper/1\" , \"graphite/2\" ], \"power\" : 2.5 }, \"craftTime\" : 250.0 }, { \"input\" : { \"items\" : [ \"cyber-io-ic/1\" , \"lead\" ] }, \"output\" : { \"fluids\" : [ \"cyber-io-cyberion/1.2\" ] }, \"craftTime\" : 210.0 } ] In a javascript file, you should import the MultiCrafter class from multi-cafter const multi = require ( \"multi-crafter/lib\" ) const mineCrafter = multi . MultiCrafter ( \"mine-crafter\" ) You can add recipes like this: mineCrafter . recipes = [ { input : \"ozone/1.5\" , output : { items : [ \"copper/1\" , \"graphite/2\" ] power : 2.5 }, craftTime : 250.0 },{ input : { items : [ \"cyber-io-ic/1\" , \"lead\" ] }, output : { fluids : [ \"cyber-io-cyberion/1.2\" ] }, craftTime : 210.0 }]","title":"Usage"},{"location":"usage/#recipe","text":"A recipe has several fields: Field Type Note input Object, String or List alias: [ in , i ] output Object, String or List alias: [ out , o ] crafterTime number | unit: tick how long to do a synthesis, can be 0. icon String such as Icon.lock-open . see icon iconColor String a hex color for icon","title":"Recipe"},{"location":"usage/#input-and-output","text":"","title":"Input and Output"},{"location":"usage/#string","text":"The input or output can be a String . If so, it will be considered as an item or fluid. If there is no amount given, 1 will be the amount as default. Hjson Json JavaScript input: copper/2 output: water/1.2 \"input\" : \"copper/2\" , \"output\" : \"water/1.2\" input : \"copper/2\" , output : \"water/1.2\"","title":"String"},{"location":"usage/#list","text":"The input or output can be a List . If so, every element will be treated as an item or fluid. Hjson Json JavaScript input: [copper/2,lead/3] output: slag/2.5 \"input\" : [ \"copper/2\" , \"lead/3\" ], \"output\" : \"slag/2.5\" input : [ \"copper/2\" , \"lead/3\" ], output : \"slag/2.5\"","title":"List"},{"location":"usage/#object","text":"The input or output can be an Object . With this style, its power is unlimited. Key Type Optional Note items String or List fluids String or List power number | unit: power/tick \u2714\ufe0f how much power for input/output, 0 as default heat number \u2714\ufe0f how much heat for input/output, 0 as default icon String \u2714\ufe0f such as Icon.lock-open . see icon iconColor String \u2714\ufe0f a hex color for icon craftEffect String \u2714\ufe0f an independent craft effect for each recipe Hjson Json JavaScript input: { items: copper/10 heat: 5 } output: { items: moded-item/1 fluids: [ water/1.5, ozone/3 ] power: 1.5 } \"input\" : { \"items\" : \"copper/10\" , \"heat\" : 5 } \"output\" : { \"items\" : \"moded-item/1\" , \"fluids\" : [ \"water/1.5\" , \"ozone/3\" ], \"power\" : 1.5 } input : { items : \"copper/10\" , heat : 5 }, output : { items : \"moded-item/1\" , fluids : [ \"water/1.5\" , \"ozone/3\" ], power : 1.5 }","title":"Object"},{"location":"usage/#icon","text":"You can customize which icon is used for your recipe selector menu. If you don't set a dedicated icon, it will find the first one from the recipe. For example: alphaaaa mono icon: alphaaaa iconColor: F30000 recipes: [ { input: ozone/1.5 output:{ items : copper power : 2 icon: alphaaaa iconColor: \"F30000\" } craftTime : 250.0 } { input: copper output:{ items : coal icon: lock-open } craftTime : 120 } ] icon: mono menu: Simple recipes: [ { input: copper output: coal craftTime : 60 icon: mono } { input: copper output: ozone craftTime : 60 } ] You can set it to a String , it will find the proper icon automatically. For a built-in icon, it should start with Icon. , such as Icon.lock-open or Icon.trash . For an icon from item, fluid, unit or block, it should be its name, such as mono , phase-heat . For any texture, it should be its name, such as your-mod-icon or alphaaaa .","title":"Icon"}]}